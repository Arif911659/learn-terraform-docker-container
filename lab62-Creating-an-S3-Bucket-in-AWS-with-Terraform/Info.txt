Creating an S3 Bucket in AWS with Terraform

Creating an S3 Bucket in AWS with Terraform
Introduction
In this lab, we will learn how to create an S3 bucket with versioning enabled using Terraform. Amazon S3 (Simple Storage Service) is an object storage service that offers industry-leading scalability, data availability, security, and performance. This lab will guide you through the process of creating an S3 bucket, enabling versioning, and tagging the bucket for better management and organization.



Objectives
Understand the basics of Amazon S3 and bucket configuration.
Create an S3 bucket using Terraform.
Enable versioning on the S3 bucket.
Add tags to the S3 bucket.
Verify the setup.
Prerequisites
An AWS account with permissions to create S3 buckets.
Terraform installed on your local machine.
Understanding S3 Concepts
S3 Buckets
An S3 bucket is a container for storing objects (files). You can store any number of objects in a bucket, and each object can be up to 5 terabytes in size. Buckets are region-specific, and the name of the bucket must be unique across all AWS accounts.

Key Components of an S3 Bucket
Bucket Name: A unique name for the bucket.
Region: The AWS region where the bucket is created.
Access Control List (ACL): Permissions for the bucket (e.g., private, public-read).
S3 Bucket Versioning
Versioning in S3 allows you to keep multiple versions of an object in the same bucket. Versioning can help you recover from both unintended user actions and application failures.

Key Features of S3 Bucket Versioning
Enabled: All versions of objects are stored.
Suspended: Stops accruing new versions, but existing versions remain.
Step 1: Setting Up Terraform Configuration
Install AWS CLI
Before proceeding, ensure that the AWS CLI is installed on your local machine. Follow the instructions below based on your operating system:

Windows:

Download the AWS CLI MSI installer from the official AWS website.
Run the downloaded MSI installer and follow the instructions.
Linux:

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
Configure AWS CLI
After installing the AWS CLI, configure it with the necessary credentials. Run the following command and follow the prompts to configure it:

aws configure
Explanation: This command sets up your AWS CLI with the necessary credentials, region, and output format.


You will find the AWS Access key and AWS Seceret Access key on Lab description page,where you generated the credentials



Create a New Terraform Configuration File
Create a Terraform Project Directory
mkdir terraform
cd terraform
Create a file named main.tf to define the S3 bucket and its configuration.

# main.tf

provider "aws" {
  region = "ap-southeast-1"
}
Explanation: This sets up the AWS provider and specifies the region (ap-southeast-1) where resources will be created.
Step 2: Create an S3 Bucket
Define the S3 Bucket
Add a resource block to define an S3 bucket with specific ACL and tags.

resource "aws_s3_bucket" "example_bucket" {
  bucket = "my-bucket-poridhi-123"
  acl    = "private"

  tags = {
    Name        = "MyExampleBucket"
    Environment = "Dev"
  }
}
Explanation:
bucket: Specifies the name of the S3 bucket. The name must be unique across all AWS accounts.
acl: Sets the access control list to private, meaning only the bucket owner has access to the bucket.
tags: Adds metadata to the bucket to help identify and organize it.

#############################################
The issue is that the acl attribute is deprecated in the aws_s3_bucket resource.

According to the AWS provider documentation, the acl attribute has been deprecated in favor of the grant attribute. The grant attribute allows for more fine-grained control over the permissions on the S3 bucket.

To fix the issue, you can replace the acl attribute with the grant attribute. For example:

Code
CopyInsert
resource "aws_s3_bucket" "my_bucket" {
    bucket = "my_bucket-poridhi-123"

    grant {
        type        = "bucket_owner_full_control"
        permissions = ["READ", "WRITE", "READ_ACP", "WRITE_ACP", "FULL_CONTROL"]
    }

    tags = {
        Name = "MyBucket"
        Environment = "Dev"
    }  
}
Alternatively, you can use the acl attribute with the access_control_policy argument, like this:

Code
CopyInsert
resource "aws_s3_bucket" "my_bucket" {
    bucket = "my_bucket-poridhi-123"

    access_control_policy {
        grant {
            grantee {
                id   = data.aws_canonical_user_ids.current.user_id
                type = "CanonicalUser"
            }
            permission = "FULL_CONTROL"
        }
    }

    tags = {
        Name = "MyBucket"
        Environment = "Dev"
    }  
}
Note that the access_control_policy argument requires a data source to retrieve the canonical user ID.

It's worth noting that the acl attribute is still supported for backwards compatibility, but it's recommended to use the grant attribute or access_control_policy argument instead.

###################################################################
Step 3: Enable Versioning on the S3 Bucket
Define the Bucket Versioning
Add a resource block to enable versioning on the S3 bucket.

resource "aws_s3_bucket_versioning" "example_versioning" {
  bucket = aws_s3_bucket.example_bucket.id

  versioning_configuration {
    status = "Enabled"
  }
}
Explanation:
bucket: References the S3 bucket created earlier.
versioning_configuration: Enables versioning on the bucket.
Step 4: Initializing and Applying Terraform
Initialize Terraform
Initialize your Terraform workspace to download the required provider plugins:

terraform init


Apply the Configuration
Apply the Terraform configuration to create the S3 bucket and enable versioning:

terraform apply


Type yes when prompted to confirm the creation of resources.

Step 5: Verifying the Setup
Verify in AWS Console
S3 Bucket: Navigate to the S3 section in the AWS Console and verify that the bucket my-bucket-poridhi-123 is created. 

Versioning: Check that versioning is enabled for the bucket. 

Conclusion
In this lab, you learned how to create an S3 bucket and enable versioning using Terraform. You defined an S3 bucket with a unique name and private ACL, enabled versioning on the bucket, and added tags for better management. This exercise demonstrates the power of Terraform in managing AWS S3 resources, highlighting best practices for data storage and version control.

###################################################################
To store S3 bucket information (e.g., bucket name, ARN, and ID) in a text file whenever a bucket is created or updated using Terraform, you can utilize Terraform's local_file resource. This will allow you to write the relevant information to a file after the bucket is created or modified.
###################################################################

Hereâ€™s how you can do it:

1. Modify main.tf to Add the local_file Resource
Add the local_file resource to store the bucket information in a text file.

hcl
Copy code
provider "aws" {
  region = "us-east-1" # Change to your preferred AWS region
}

resource "aws_s3_bucket" "example_bucket" {
  bucket = "my-unique-bucket-name"  # Replace with a unique bucket name
  acl    = "private"

  tags = {
    Name        = "My S3 Bucket"
    Environment = "Dev"
  }
}

# Write bucket information to a text file after bucket creation or update
resource "local_file" "bucket_info" {
  filename = "${path.module}/bucket_info.txt"  # Text file path
  content  = <<EOT
Bucket Name: ${aws_s3_bucket.example_bucket.bucket}
Bucket ARN: ${aws_s3_bucket.example_bucket.arn}
Bucket ID: ${aws_s3_bucket.example_bucket.id}
EOT
}

output "bucket_id" {
  value = aws_s3_bucket.example_bucket.id
}

output "bucket_arn" {
  value = aws_s3_bucket.example_bucket.arn
}
2. Initialize and Apply the Configuration
Run the following commands to initialize and apply the Terraform configuration:

bash
Copy code
terraform init
terraform apply
Terraform will:

Create or update the S3 bucket.
Generate a file bucket_info.txt in your project directory, containing the bucket information.
3. View the Text File
After Terraform runs successfully, you will find a file named bucket_info.txt in your project directory with the following content:

ruby
Copy code
Bucket Name: my-unique-bucket-name
Bucket ARN: arn:aws:s3:::my-unique-bucket-name
Bucket ID: my-unique-bucket-name
Explanation
The local_file resource writes the S3 bucket details (name, ARN, and ID) to a text file called bucket_info.txt.
${path.module} is a built-in Terraform function that references the current module's directory.
This ensures that the text file is updated whenever the S3 bucket is created or modified by Terraform.